	Двунаправленная очередь.
Дек (Deque) - структура данных типа «список» функционирующая одновременно по двум принцам организации данных: FIFO (first in, first out) и LIFO (last in, first out). Определить дек можно как очередь с двумя сторонами, так и стек, имеющий два конца.
a) В каждом элементе дека указатели на предыдущий и следующий элементы. То есть :
struct Node {
	int data;
	Node* next = NULL;
	Node* prev = NULL;
};
class Deque{
Node* head;
public:
	Deque(int x);
	~Deque();
	void push(int x);
	int pop();
};

b) 
void push(int x){
	Node*temp=new Node;
	temp->next=head;
	head->prev=temp;
	temp->data=x;
	head=temp;
	}

int pop(int x){     //x-номер элемента, который необходимо извлечь, нумерация начинается с конца (т.е. 0-последний пришедший элемент,1-предпоследний и т.д.)
	if (!head){
		cerr<<"Deque is empty!";
		return 0;
	}
	Node*temp=head;
	for(int i=0;i<x;i++){
	temp=temp->next;
	}
	int res=temp->data;
	temp->prev->next=temp->next;
	temp->next->prev=temp->prev;
	delete temp;
	return res;
}

c) Амортизационный анализ
Воспользуемся методом потенциалов.
Одна операция pop(n) требует O(n) времени, совокупное же время работы может быть проанализировано с помощью следующей потенциальной функции Ф(S), равной числу элементов в деке S. Данная величина всегда неотрицательна, при этом операция push работает за константу и увеличивает Ф на единицу, а операция pop работает за O(n). Из этого следует, что суммарное время исполнения любой последовательности из k операций равно k*O(n)=O(n) в худшем случае.

Ответ: любая последовательность операций выполняется в худшем случае за линейное время. 


